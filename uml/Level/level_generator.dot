digraph "classes" {
rankdir=BT
charset="utf-8"
"level_generator.LevelGenerator" [color="black", fontcolor="black", label=<{LevelGenerator|chunk_generator<br ALIGN="LEFT"/>chunk_size<br ALIGN="LEFT"/>enemy_pool : NoneType<br ALIGN="LEFT"/>map : ndarray<br ALIGN="LEFT"/>objective_items_pool : list<br ALIGN="LEFT"/>poi_items_pool : list<br ALIGN="LEFT"/>scale : int<br ALIGN="LEFT"/>scaling_factors : tuple<br ALIGN="LEFT"/>size : tuple[int, int]<br ALIGN="LEFT"/>size_x<br ALIGN="LEFT"/>size_y<br ALIGN="LEFT"/>sprite_size<br ALIGN="LEFT"/>surface_mapper : NoneType<br ALIGN="LEFT"/>|__generate_map(size: tuple[int, int], chunk_size, n_poi, clear_radius_from_poi, noise_resolution, lower_threshold, upper_threshold, enemy_pool)<br ALIGN="LEFT"/>__init__(size: tuple[int, int], sprite_size, chunk_size, scale)<br ALIGN="LEFT"/>generate_map(n_poi, clear_radius_from_poi, noise_resolution, lower_threshold, upper_threshold, surface_mapper_cls): tuple[np.matrix, tuple[int, int], Surface, list[Surface], list[Enemy], list[Item], list[Item]]<br ALIGN="LEFT"/>place_items(scale, chunk_size, tiles, items_pool, n_items)<br ALIGN="LEFT"/>populate_area(scale, chunk_size, tiles, enemy_pool, n_enemies)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"level_generator.Level_1_surface" [color="black", fontcolor="black", label=<{Level_1_surface|ground_sprite_pool : list<br ALIGN="LEFT"/>obst1_dict : dict<br ALIGN="LEFT"/>obst2_dict : dict<br ALIGN="LEFT"/>||__init__(map_matrix, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"level_generator.Level_2_surface" [color="black", fontcolor="black", label=<{Level_2_surface|ground_sprite_pool : list<br ALIGN="LEFT"/>obst1_dict : dict<br ALIGN="LEFT"/>obst2_dict : dict<br ALIGN="LEFT"/>||__init__(map_matrix, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"level_generator.Level_3_surface" [color="black", fontcolor="black", label=<{Level_3_surface|ground_sprite_pool : list<br ALIGN="LEFT"/>obst1_dict : dict<br ALIGN="LEFT"/>obst2_dict : dict<br ALIGN="LEFT"/>||__init__(map_matrix, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"level_generator.SurfaceMapper" [color="black", fontcolor="black", label=<{SurfaceMapper|ground_sprite_pool : list<br ALIGN="LEFT"/>map_matrix<br ALIGN="LEFT"/>obst1_dict : dict<br ALIGN="LEFT"/>obst2_dict : dict<br ALIGN="LEFT"/>scale : int<br ALIGN="LEFT"/>__init__(map_matrix, scale)<br ALIGN="LEFT"/>|calculate_bitmask(map_matrix, map_pos)<br ALIGN="LEFT"/>draw_lines(bitmask_dict, surf_size, sprite_size, surf, line)<br ALIGN="LEFT"/>generate_map_surface(chunk_size: int, sprite_size: tuple[int, int])<br ALIGN="LEFT"/>generate_random_surf(sprite_pool: list[Surface], sprite_size: tuple[int, int], surf_size: tuple[int, int])<br ALIGN="LEFT"/>tile_bitmasking(map_matrix, map_pos: tuple[int, int], bitmask_dict: dict[str, Surface], chunk_size: tuple[int, int], sprite_size: tuple[int, int])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"level_generator.TileEnum" [color="black", fontcolor="black", label=<{TileEnum|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"generator.ChunkGenerator" [color="black", fontcolor="black", label=<{ChunkGenerator|chunk_info<br ALIGN="LEFT"/>chunk_size : int<br ALIGN="LEFT"/>chunks<br ALIGN="LEFT"/>m<br ALIGN="LEFT"/>map<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>spawn_point<br ALIGN="LEFT"/>|generate_chunk_map(map, assignable_threshold: tuple[float, float])<br ALIGN="LEFT"/>get_chunk_info()<br ALIGN="LEFT"/>map_chunk_index_to_tiles(chunk_index): list[tuple[int, int]]<br ALIGN="LEFT"/>place_spawn(): tuple[tuple[int, int], tuple[int, int]]<br ALIGN="LEFT"/>position_objectives(): list[tuple[int, int]]<br ALIGN="LEFT"/>position_poi(n, radius): list[tuple[int, int]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"generator.GenerationException" [color="black", fontcolor="red", label=<{GenerationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"level_generator.Level_1_surface" -> "level_generator.SurfaceMapper" [arrowhead="empty", arrowtail="none"];
"level_generator.Level_2_surface" -> "level_generator.SurfaceMapper" [arrowhead="empty", arrowtail="none"];
"level_generator.Level_3_surface" -> "level_generator.SurfaceMapper" [arrowhead="empty", arrowtail="none"];
"generator.ChunkGenerator" -> "level_generator.LevelGenerator" [arrowhead="diamond", arrowtail="none"];
"level_generator.SurfaceMapper" -> "level_generator.LevelGenerator" [arrowhead="diamond", arrowtail="none"];
}
