digraph "Entity" {
rankdir=BT
charset="utf-8"
"player.Player" [color="black", fontcolor="black", label=<{player.Player|action_state : dict<br ALIGN="LEFT"/>clock<br ALIGN="LEFT"/>collision_sprites<br ALIGN="LEFT"/>director<br ALIGN="LEFT"/>health : int<br ALIGN="LEFT"/>health_ui<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>is_rewinding : bool<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>running_speed : int<br ALIGN="LEFT"/>shoe_sound<br ALIGN="LEFT"/>speed : int<br ALIGN="LEFT"/>state : tuple<br ALIGN="LEFT"/>walk_sound<br ALIGN="LEFT"/>walking_speed : int<br ALIGN="LEFT"/>weapons : list<br ALIGN="LEFT"/>|__init__(collision_sprites, damageable_sprites, thrown_sprite_group, clock, scale)<br ALIGN="LEFT"/>add_drawing_sprite_group(sprite_group, ui_group)<br ALIGN="LEFT"/>add_slipper(amount)<br ALIGN="LEFT"/>apply_input()<br ALIGN="LEFT"/>handle_input(inputs: list[tuple[bool, str]])<br ALIGN="LEFT"/>heal(amount)<br ALIGN="LEFT"/>kill()<br ALIGN="LEFT"/>receive_damage(damage_amount)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_state(action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"entity.Entity" [color="black", fontcolor="black", label=<{entity.Entity|can_cause_damage : bool<br ALIGN="LEFT"/>collision_sprites<br ALIGN="LEFT"/>damageable_sprite_group : list<br ALIGN="LEFT"/>dir_dict : dict<br ALIGN="LEFT"/>direction<br ALIGN="LEFT"/>health : int<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>image_offset<br ALIGN="LEFT"/>invincible : bool<br ALIGN="LEFT"/>is_attacking : bool<br ALIGN="LEFT"/>speed : int<br ALIGN="LEFT"/>sprite<br ALIGN="LEFT"/>sprite_groups : list<br ALIGN="LEFT"/>state : tuple<br ALIGN="LEFT"/>|__init__(damageable_sprites, sprite_groups)<br ALIGN="LEFT"/>add_drawing_sprite_group(sprite_group)<br ALIGN="LEFT"/>add_to_sprite_group(group)<br ALIGN="LEFT"/>attack_animation_callback()<br ALIGN="LEFT"/>collision(direction)<br ALIGN="LEFT"/>get_orientation()<br ALIGN="LEFT"/>get_pos()<br ALIGN="LEFT"/>heal(amount)<br ALIGN="LEFT"/>move()<br ALIGN="LEFT"/>receive_damage(damage_amount)<br ALIGN="LEFT"/>remove_from_sprite_group(group)<br ALIGN="LEFT"/>set_attack_damageable()<br ALIGN="LEFT"/>set_collision_sprites(sprite_group)<br ALIGN="LEFT"/>set_damageable_sprite_group(group)<br ALIGN="LEFT"/>set_pos(pos)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_state(state, orientation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"enemy.Enemy" [color="black", fontcolor="black", label=<{enemy.Enemy|behavior<br ALIGN="LEFT"/>collision_sprites<br ALIGN="LEFT"/>direction<br ALIGN="LEFT"/>goal : NoneType<br ALIGN="LEFT"/>goal_tick_rate : int<br ALIGN="LEFT"/>health : int<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>last_tick : int<br ALIGN="LEFT"/>map<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>spawn_pos<br ALIGN="LEFT"/>walking_speed : int<br ALIGN="LEFT"/>weapon : NoneType<br ALIGN="LEFT"/>|__init__(collision_sprites, damageable_sprites, sprite_path, entity_rect, map, scale)<br ALIGN="LEFT"/>attack()<br ALIGN="LEFT"/>move()<br ALIGN="LEFT"/>set_goal(goal)<br ALIGN="LEFT"/>update(player_pos, clock)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"behavior.Behavior" [color="black", fontcolor="black", label=<{Behavior|enemy<br ALIGN="LEFT"/>|__init__(enemy)<br ALIGN="LEFT"/>attack(player_pos, orientation)<br ALIGN="LEFT"/>get_goal(player_pos: Tuple[int, int]): Tuple[int, int]<br ALIGN="LEFT"/>get_orientation(x_dist, y_dist)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sprites.ActionEnum" [color="black", fontcolor="black", label=<{ActionEnum|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sprites.SpriteSheet" [color="black", fontcolor="black", label=<{SpriteSheet|sheet<br ALIGN="LEFT"/>|__init__(image)<br ALIGN="LEFT"/>image_at(rect, scale, color)<br ALIGN="LEFT"/>images_at(rects, scale, colorkey)<br ALIGN="LEFT"/>load_strip(rect, img_count, scale, colorkey)<br ALIGN="LEFT"/>load_tiled_style(sprite_dimensions: tuple[int, int], scale): list[pg.Surface]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sprites.Sprite_handler" [color="black", fontcolor="black", label=<{Sprite_handler|animation_idx : int<br ALIGN="LEFT"/>animation_speed<br ALIGN="LEFT"/>animation_step : int<br ALIGN="LEFT"/>attack_animation_callback : NoneType<br ALIGN="LEFT"/>attack_damage_callback : NoneType<br ALIGN="LEFT"/>attack_effective_idx : int<br ALIGN="LEFT"/>dict : dict<br ALIGN="LEFT"/>disable_flipping : bool<br ALIGN="LEFT"/>last_step : int<br ALIGN="LEFT"/>sprite_facing_right<br ALIGN="LEFT"/>state : tuple<br ALIGN="LEFT"/>|__init__(facing_sprites, disable_flipping)<br ALIGN="LEFT"/>get_animation_index()<br ALIGN="LEFT"/>get_img(state)<br ALIGN="LEFT"/>load_regular_sprites(spritesheet_path, scale)<br ALIGN="LEFT"/>set_attack_animation_callback(callback)<br ALIGN="LEFT"/>set_attack_damage_callback(callback)<br ALIGN="LEFT"/>set_attack_effective_idx(idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sprites.Sprite_handler" -> "entity.Entity" [arrowhead="diamond"];
"enemy.Enemy" -> "entity.Entity" [arrowhead="empty"];
"player.Player" -> "entity.Entity" [arrowhead="empty"];
"behavior.Behavior" -> "enemy.Enemy" [arrowhead="diamond"];
"sprites.SpriteSheet" -> "sprites.Sprite_handler" [arrowhead="diamond"];
}