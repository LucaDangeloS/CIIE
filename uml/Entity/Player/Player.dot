digraph "Player" {
rankdir=BT
charset="utf-8"
"player.Player" [color="black", fontcolor="black", label=<{Player|action_state : dict<br ALIGN="LEFT"/>clock<br ALIGN="LEFT"/>collision_sprites<br ALIGN="LEFT"/>director<br ALIGN="LEFT"/>health : int<br ALIGN="LEFT"/>health_ui<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>is_rewinding : bool<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>running_speed : int<br ALIGN="LEFT"/>shoe_sound<br ALIGN="LEFT"/>speed : int<br ALIGN="LEFT"/>state : tuple<br ALIGN="LEFT"/>walk_sound<br ALIGN="LEFT"/>walking_speed : int<br ALIGN="LEFT"/>weapons : list<br ALIGN="LEFT"/>|__init__(collision_sprites, damageable_sprites, thrown_sprite_group, clock, scale)<br ALIGN="LEFT"/>add_drawing_sprite_group(sprite_group, ui_group)<br ALIGN="LEFT"/>add_slipper(amount)<br ALIGN="LEFT"/>apply_input()<br ALIGN="LEFT"/>handle_input(inputs: list[tuple[bool, str]])<br ALIGN="LEFT"/>heal(amount)<br ALIGN="LEFT"/>kill()<br ALIGN="LEFT"/>receive_damage(damage_amount)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_state(action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"weapons.Weapon" [color="black", fontcolor="black", label=<{Weapon|attack_ready : bool<br ALIGN="LEFT"/>cooldown : int<br ALIGN="LEFT"/>|__subclasshook__(subclass)<br ALIGN="LEFT"/><I>attack</I>(orientation: tuple[int, int], damagable_group: pg.sprite.Group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"stick.Stick" [color="black", fontcolor="black", label=<{Stick|attack_ready : bool<br ALIGN="LEFT"/>cooldown : int<br ALIGN="LEFT"/>damage : int<br ALIGN="LEFT"/>last_step<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>rect_dim : tuple<br ALIGN="LEFT"/>sprite<br ALIGN="LEFT"/>|__init__(player_pos: tuple[int, int])<br ALIGN="LEFT"/>attack(player_rect: pg.Rect, orientation: str, damagable_group: pg.sprite.Group)<br ALIGN="LEFT"/>draw_hitbox(screen)<br ALIGN="LEFT"/>update(player_pos: tuple[int, int])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"slipper.Slipper" [color="black", fontcolor="black", label=<{Slipper|cooldown : int<br ALIGN="LEFT"/>damage : int<br ALIGN="LEFT"/>direction<br ALIGN="LEFT"/>moving_speed : int<br ALIGN="LEFT"/>ready : bool<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>rect_dim : tuple<br ALIGN="LEFT"/>sprite<br ALIGN="LEFT"/>sprite_handler<br ALIGN="LEFT"/>state : tuple<br ALIGN="LEFT"/>thrown_group<br ALIGN="LEFT"/>|__init__(sprite_scale)<br ALIGN="LEFT"/>attack(player_rect: pg.Rect, orientation: tuple[int, int])<br ALIGN="LEFT"/>draw_hitbox(screen)<br ALIGN="LEFT"/>update(damagable_group: pg.sprite.Group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"slipper.WeaponPool" [color="black", fontcolor="black", label=<{WeaponPool|active_weapons : list<br ALIGN="LEFT"/>ammo<br ALIGN="LEFT"/>ammo : int<br ALIGN="LEFT"/>cooldown<br ALIGN="LEFT"/>last_step<br ALIGN="LEFT"/>thrown_sprite_group<br ALIGN="LEFT"/>weapon_idx : int<br ALIGN="LEFT"/>weapon_pool : list<br ALIGN="LEFT"/>|__init__(WeaponClass, poolSize: int, cooldown, thrown_sprite_group, sprite_scale)<br ALIGN="LEFT"/>attack(player_rect: pg.Rect, orientation: tuple[int, int])<br ALIGN="LEFT"/>draw_hitboxes(screen)<br ALIGN="LEFT"/>get_ammo()<br ALIGN="LEFT"/>increase_pool(amount)<br ALIGN="LEFT"/>update(damagable_group: pg.sprite.Group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"clock.Clock" [color="black", fontcolor="black", label=<{Clock|clock_ui<br ALIGN="LEFT"/>cooldown : int<br ALIGN="LEFT"/>director<br ALIGN="LEFT"/>last_rewind<br ALIGN="LEFT"/>last_rewind<br ALIGN="LEFT"/>rewinding<br ALIGN="LEFT"/>rewinding : bool<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>time_manager<br ALIGN="LEFT"/>|__init__(scale)<br ALIGN="LEFT"/>draw_blur(screen)<br ALIGN="LEFT"/>get_rewinding()<br ALIGN="LEFT"/>go_back_in_time()<br ALIGN="LEFT"/>set_rewinding(value)<br ALIGN="LEFT"/>take_snapshot(entity, pos)<br ALIGN="LEFT"/>update_screen_res(screen_res: tuple[int, int])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ui.PlayerHealthUI" [color="black", fontcolor="black", label=<{PlayerHealthUI|image<br ALIGN="LEFT"/>max_health<br ALIGN="LEFT"/>rect<br ALIGN="LEFT"/>|__init__(max_health, scale)<br ALIGN="LEFT"/>update(health_amount)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"ui.PlayerHealthUI" -> "player.Player" [arrowhead="diamond"];
"clock.Clock" -> "player.Player" [arrowhead="empty"]
"slipper.Slipper" -> "weapons.Weapon" [arrowhead="empty"]
"slipper.WeaponPool" -> "player.Player" [arrowhead="diamond"]
"slipper.Slipper" -> "slipper.WeaponPool" [arrowhead="diamond"]
"stick.Stick" -> "player.Player" [arrowhead="diamond"]
"stick.Stick" -> "weapons.Weapon" [arrowhead="empty"]
}
